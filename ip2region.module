<?php
// $Id$
/**
* @file
* This modules provides an interface for administrators to manage Region/IP Address combinations
*/

/** 
* Implementation of hook_help()
*/
function ip2region_help($path, $arg) {
  /**
  switch ($path) {
    case 'admin/help#ip2region':
      $txt = '<p>'. t('This module provides an interface for administrators to manage Region/IP Address combinations') .'</p>';
      return $txt;
    case 'admin/settings/ip2region':
      $txt = '<p>'. t("IP 2 Region settings are used to determine how and when regional content will be shown.") .'</p>';  
      return $txt;
  }
  
  */
  if ($path=='admin/settings/ip2region') {
    $txt = '<p>'. t("IP 2 Region settings are used to determine how and when regional content will be shown.") .'</p>';  
    return $txt;
  }
}

/**
* Implementation of hook_menu()
*/
function ip2region_menu() {
  $items['admin/settings/ip2region'] = array(
    'title' => t('IP to Region'), 
    'page callback' => 'ip2region_admin_list',
    'file' => 'ip2region.admin.inc',
    'access arguments' => array('administer regions'),
    );
  $items['admin/settings/ip2region/list'] = array(
    'title' => 'List',
    'page callback' => 'ip2region_admin_list',
    'access arguments' => array('administer regions'),
    'file' => 'ip2region.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    );
  $items['admin/settings/ip2region/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ip2region_admin_add'),
    'access arguments' => array('administer regions'),
    'file' => 'ip2region.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1, 
  	);
 	$items['admin/settings/ip2region/delete/%'] = array(
  	'title' => t('Delete Region/IP'),
  	'page callback' => 'ip2region_admin_delete',
    'page arguments' => array(4),
 		'access arguments' => array('administer regions'),
 		'file' => 'ip2region.admin.inc',
    'type' => MENU_CALLBACK,
 	);
 	  $items['admin/settings/ip2region/test'] = array(
    'title' => 'Test IP Range',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ip2region_admin_test'),
    'access arguments' => array('administer regions'),
    'file' => 'ip2region.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2, 
  	);
  return $items;    
}

/**
* Implementation of hook_perm()
* Allows administrator to determine who can administer and who can access regions
*/
function ip2region_perm() {
  return array('administer regions', 'access regions', 'view regional content', 'update regional content', 'delete regional content');
}


/**
 * Get the user's current ip address
 */
function ip2region_ip_address() {
  if (variable_get('ip2region_debug', FALSE) && $_GET['ip2region_debug']) {
    $ip = $_GET['ip2region_debug'];
    drupal_set_message('IP to Region debug... Using IP: '. $ip);
  }
  else {
    $ip = ip_address();
  }
  return $ip;
}


/**
 * Compare IP address with ip2region table and determine region
 */
function ip2region_get_region_from_region($users_region=NULL) {
  $region_name = 'default';
  $ip2region_row = _ip2region_get_region($users_region);
  $region_tid = $ip2region_row->tid;
  $region_name = $ip2region_row->name;
  return array('region_tid'=>$region_tid, 'region_name'=>$region_name);
}

/**
 * Compare IP address with ip2region table and determine region
 */
function ip2region_get_region_from_ip($users_ip=NULL) {
	$region_name = 'default';
	if ($users_ip==NULL) $users_ip = ip2region_ip_address();
	
	foreach (_ip2region_get_regions_ip_ranges() as $ip2region_row) {
		$ip_from = $ip2region_row->ip_from;
		$ip_to = $ip2region_row->ip_to;
		if ($ip_to != '') {
			//check users_ip is within the range ip_from - ip_to 
			if (_compare_ip_addresses($users_ip,$ip_from) >= 0 && _compare_ip_addresses($users_ip,$ip_to) <= 0) {
				$region_tid = $ip2region_row->tid;
				$region_name = $ip2region_row->name;
				break;
			}
		}
		else {
			//check exact match
			if ($users_ip==$ip_from) {
				$region_tid = $ip2region_row->tid;
				$region_name = $ip2region_row->name;
				break;
			}
		}
	}
  return array('region_tid'=>$region_tid, 'region_name'=>$region_name);
}

function ip2region_token_values($type, $object = NULL) {
  $log = fopen('/tmp/token.log', 'a');
  fwrite($log, "\n");
  fwrite($log, "Type: ".$type);
  
  $region = ip2region_get_region_from_ip();
  fwrite($log, "\n");
  fwrite($log, print_r($region, TRUE));
  fclose($log);
  
  return $region;
}

function ip2region_token_list($type = 'all') {  
  $tokens['global']['region_tid'] = t("The user's region's taxonomy id");
  $tokens['global']['region_name'] = t("The user's region");
  
  return $tokens;
}

function ip2region_get_user_region($user) {
  $ret = db_query("SELECT tid FROM {ip2region_users} WHERE uid = %d LIMIT 1", $user->uid);
  $ret = db_fetch_object($ret);

  if($ret && $ret->tid) {
    return taxonomy_get_term($ret->tid);
  }
  
  return NULL;
}

/**
 * Implementation of hook_user()
 * 
 * Alters the user form to include a region taxonomy dropdown.
 * Allows us to associate a user with a region.
 */

function ip2region_user($op, &$edit, &$user, $category = NULL) {
  if($op=='register' || $op=='form') {
    $fields = array();
    $group = 'IP 2 Region';
    
    $term = ip2region_get_user_region($user);
    
    $fields['ip2region']['region'] = array(
      '#type' => 'select',
      '#title' => check_plain('Region Name'),
      '#default_value' => (isset($term) && isset($term->tid)) ? $term->tid : '',
      '#description' => t('Choose a region'),
      '#options' => array_merge(array('No Region'), _ip2region_taxonomy_get_all_terms()),
      '#required' => FALSE,
    );
    
    return $fields;
  } elseif($op=='insert' || $op=='update') {
    $region = $edit['region'];
    
    db_query("DELETE FROM {ip2region_users} WHERE uid = %d", $user->uid);
    
    if($region != 0 && $region != "") {
      db_query("INSERT INTO {ip2region_users} (uid,tid) VALUES(%d,%d)", $user->uid, $region);
    }
        
    $edit['region'] = NULL;
  } elseif($op=='load') {
    $user->region = ip2region_get_user_region($user);
  }
}

/**
 * Implementation of hook_node_grants
 */
function ip2region_node_grants($account, $op) {
  $region = ip2region_get_user_region($account);
  
  if($region) {
    if(user_access($op.' regional content', $account)) {
      return array(
        'region' => array($region->tid)
      );
    }
  }
}

/**
 * Implementation of hook_node_access_records
 */
function ip2region_node_access_records($node) {
  // we only care about the node if it has a region term
  $log = fopen('/tmp/rebuild.log', 'a');  
  fwrite($log, print_r($node, TRUE));
  $region = _ip2region_get_region_from_node($node); 
  
  $grants = array();
  
  if($region) {
    $realm = 'region';
    $ops = array('view', 'update');
    $grant = array();
    
    foreach($ops as $op) {
      $grant['grant_'.$op] = 1;
    }
    $grant['realm'] = $realm;
    $grant['gid'] = $region->tid;
    $grants[] = $grant;
  }
  
  return $grants;
}

/** 
 * Finds and returns the regional taxonomy vocabulary
 */

function _ip2region_get_vocabulary() {
  foreach(taxonomy_get_vocabularies() as $vocabulary) {
    if($vocabulary->name=="Regions") {
      return $vocabulary;
    }
  }
}

/** 
 * Helper function that returns and array of name/tid for the "regions" vocabulary
 *
 */
function _ip2region_taxonomy_get_all_terms() {
  static $options = array();
  if (!count($options)) {
	  
    foreach (taxonomy_get_vocabularies() as $vocabulary) {
    	if ($vocabulary->name=="Regions") {
	      foreach (taxonomy_get_tree($vocabulary->vid) as $term) {
	        $options[$vocabulary->name][$term->tid] = str_repeat('- ', $term->depth) . $term->name;
	      }
	      return $options;
    	}
    } 
  }
  return;
}

/**
 * Return all rows from the ip2region table
 */
function _ip2region_get_regions_ip_ranges() {
	$result = db_query('SELECT uid, {term_data}.tid, {term_data}.name, ip_from, ip_to FROM {ip2region},{vocabulary} INNER JOIN {term_data} ON {term_data}.vid={vocabulary}.vid WHERE {vocabulary}.name = "Regions" AND {term_data}.tid = {ip2region}.region');
	$rows = array();
	while($row = db_fetch_object($result)) {
		$rows[] = $row;
	}
	return $rows;
}

/**
 * Returns ip2region table data for a given region
 */
function _ip2region_get_region($region_name) {
  $record = db_fetch_object(db_query("SELECT uid, name, ip_from, ip_to FROM {ip2region}, {term_data} WHERE uid='%d' AND tid=region", $uid));
  $result = db_query('SELECT {term_data}.tid, {term_data}.name FROM {vocabulary} INNER JOIN {term_data} ON {term_data}.vid={vocabulary}.vid WHERE {vocabulary}.name = "Regions" AND {term_data}.name = "%s"', $region_name);
  $row = db_fetch_object($result);
  return $row;
}

/**
 * Helper function, compares to IP addresss
 * 
 * If the first IP is less than the second returns -1
 * If the first IP is greater than the second returns 1
 * If both IP addresses are equal returns 0
 */
function _compare_ip_addresses($ip1, $ip2) {
  $num1 = explode('.', $ip1);
  $num2 = explode('.', $ip2);
  for ($counter = 0; $counter <= 3; $counter += 1) {
    if ($num1[$counter] < $num2[$counter]) {
      return -1;
    }
    elseif ($num1[$counter] > $num2[$counter]) {
      return 1;
    }
  }
	return 0;
}


/** 
 * Returns the region for a given node
 */
function _ip2region_get_region_from_node($node) {
  $terms = taxonomy_node_get_terms($node);
  $vocab = _ip2region_get_vocabulary();
  
  foreach($terms as $term) {
    if($term->vid==$vocab->vid) return $term;
  }
    
  return NULL;
}


/**
 * Get id for Regions Taxonomy according to IP address 
 * (if forced_region or forced_ip, or logged in user's region, will take precedence over machine IP address)
 */
function ip2region_get_region_tid() {
  global $user;
  
  //If IP or Region arguments set on URL, i.e. aotearoapeoplesnetwork.info?region=hurunui
  //then store these arguments to override the computer's IP 
  if (isset($_REQUEST['ip'])) : 
    $region = ip2region_get_region_from_ip($_REQUEST['ip']);
    $region_tid = $region['region_tid'];
    $_SESSION['region'] = $region_tid;
    //setcookie('region', (string)$region_tid, time() + (86400 * 7), "/");
  elseif(isset($_REQUEST['region'])) :
    $region = ip2region_get_region_from_region($_REQUEST['region']);
    $region_tid = $region['region_tid'];
    $_SESSION['region'] = $region_tid;
    //setcookie('region', (string)$region_tid, time() + (86400 * 7), "/");
  //If the user has explicitly set the region/ip, pull it from the session
  elseif(isset($_SESSION['region'])) : 
    $region_tid = $_SESSION['region'];
  //if logged in, use the region associated with the User's profile
  elseif($user->uid) :
    $region_taxonomy_entry = ip2region_get_user_region($user);
    $region_tid = $region_taxonomy_entry->tid;
  endif;
  
  $vars['ip'] = ip2region_ip_address();
  
  if(!isset($region_tid)) :
    $region_taxonomy_entry = ip2region_get_region_from_ip();
    $region_tid = $region_taxonomy_entry['region_tid'];
  endif;
  
  $tid = $region_tid;
  return $tid;
}


/**
 * Modifying standard drupal function taxonomy_select_nodes.
 * 
 * Core drupal taxonomy_select_nodes limits number of items the RSS feed variable 'feed_default_items'
 * Default was 10 and could only be raised to a maximum of 30)
 * see http://drupal.org/node/296632 for more info
 * 
 * This function modifies the number of available results, takes an optional parameter of $number_results, default is 10
 * 
 */
function ip2region_taxonomy_select_nodes($tids = array(), $operator = 'or', $depth = 0, $pager = TRUE, $order = 'n.sticky DESC, n.created DESC', $number_results=10) {
  if (count($tids) > 0) {
    // For each term ID, generate an array of descendant term IDs to the right depth.
    $descendant_tids = array();
    if ($depth === 'all') {
      $depth = NULL;
    }
    foreach ($tids as $index => $tid) {
      $term = taxonomy_get_term($tid);
      $tree = taxonomy_get_tree($term->vid, $tid, -1, $depth);
      $descendant_tids[] = array_merge(array($tid), array_map('_taxonomy_get_tid_from_term', $tree));
    }

    if ($operator == 'or') {
      $args = call_user_func_array('array_merge', $descendant_tids);
      $placeholders = db_placeholders($args, 'int');
      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n INNER JOIN {term_node} tn ON n.vid = tn.vid WHERE tn.tid IN ('. $placeholders .') AND n.status = 1 ORDER BY '. $order;
      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {term_node} tn ON n.vid = tn.vid WHERE tn.tid IN ('. $placeholders .') AND n.status = 1';
    }
    else {
      $joins = '';
      $wheres = '';
      $args = array();
      foreach ($descendant_tids as $index => $tids) {
        $joins .= ' INNER JOIN {term_node} tn'. $index .' ON n.vid = tn'. $index .'.vid';
        $wheres .= ' AND tn'. $index .'.tid IN ('. db_placeholders($tids, 'int') .')';
        $args = array_merge($args, $tids);
      }
      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n '. $joins .' WHERE n.status = 1 '. $wheres .' ORDER BY '. $order;
      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n '. $joins .' WHERE n.status = 1 '. $wheres;
    }
    $sql = db_rewrite_sql($sql);
    $sql_count = db_rewrite_sql($sql_count);
    if ($pager) {
      $result = pager_query($sql, variable_get('default_nodes_main', 10), 0, $sql_count, $args);
    }
    else {
      $result = db_query_range($sql, $args, 0, $number_results);
    }
  }

  return $result;
}

//function ip2region_form_alter(&$form, $form_state, $form_id) {
//    
//  // check for external search form and set form action to be full path
//  if ($form_id == 'search_theme_form') {
//    // change the form action to be the full path
//    $form['#action'] = '/search/ip2region'; 
//    $form['#redirect'] = 'search/ip2region'; 
//  }
// }

/**
 * 
 * This excludes regional content types for the non-regional search (see below)
 */

function ip2region_exclude_regional_types_sql() {
  //TODO: If opensourcing this project, shouldn't user site specific content-types, should programatically gather up content-types with 'regions' taxonomy
  $excluded_types = array('regional_banner_intro', 'database', 'regional_go_local', 'regional_comment');
  
  if (!empty($excluded_types)) {
     return " n.type NOT IN ('".join("','", $excluded_types)."') ";  
  }

}


/**
 * Implementation of hook_search().
 * 
 * This implements a 2 phase search:
 * 1) A non-regional search, which searches all other content except the regional content (see ip2region_db_rewrite_sql())
 * 2) A regional search, which only searches the regional content types relevent to the current region
 * 
 * The results of the two searches are combined at the end of the method using array_merge()
 */
function ip2region_search($op = 'search', $keys = NULL) {
  
  switch ($op) {
  	case 'name':
          // Label of the APN search tab.
          return t('ip2region');
          
    case 'reset':
      db_query("UPDATE {search_dataset} SET reindex = %d WHERE type = 'node'", time());
      return;
          
    case 'search':
    	
      /**
       * THIS IS THE NON-REGIONAL CONTENT SEARCH
       * 
       * Basically implements Drupal's core search EXCEPT it 
       * excludes regional content types from the search
       */
    	
      // Build matching conditions, exclude regional content types from the query.
      $where1 = ip2region_exclude_regional_types_sql();
      $join1 = '';
      $arguments1 = array();
      $conditions1 = 'n.status = 1';

      if ($type = search_query_extract($keys, 'type')) {
        $types = array();
        foreach (explode(',', $type) as $t) {
          $types[] = "n.type = '%s'";
          $arguments1[] = $t;
        }
        $conditions1 .= ' AND ('. implode(' OR ', $types) .')';
        $keys = search_query_insert($keys, 'type');
      }

      if ($category = search_query_extract($keys, 'category')) {
        $categories = array();
        foreach (explode(',', $category) as $c) {
          $categories[] = "tn.tid = %d";
          $arguments1[] = $c;
        }
        $conditions1 .= ' AND ('. implode(' OR ', $categories) .')';
        $join1 .= ' INNER JOIN {term_node} tn ON n.vid = tn.vid';
        $keys = search_query_insert($keys, 'category');
      }

      // Build ranking expression (we try to map each parameter to a
      // uniform distribution in the range 0..1).
      $ranking = array();
      $arguments2 = array();
      $join2 = '';
      // Used to avoid joining on node_comment_statistics twice
      $stats_join = FALSE;
      $total = 0;
      if ($weight = (int)variable_get('node_rank_relevance', 5)) {
        // Average relevance values hover around 0.15
        $ranking[] = '%d * i.relevance';
        $arguments2[] = $weight;
        $total += $weight;
      }
      if ($weight = (int)variable_get('node_rank_recent', 5)) {
        // Exponential decay with half-life of 6 months, starting at last indexed node
        $ranking[] = '%d * POW(2, (GREATEST(MAX(n.created), MAX(n.changed), MAX(c.last_comment_timestamp)) - %d) * 6.43e-8)';
        $arguments2[] = $weight;
        $arguments2[] = (int)variable_get('node_cron_last', 0);
        $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
        $stats_join = TRUE;
        $total += $weight;
      }
      if (module_exists('comment') && $weight = (int)variable_get('node_rank_comments', 5)) {
        // Inverse law that maps the highest reply count on the site to 1 and 0 to 0.
        $scale = variable_get('node_cron_comments_scale', 0.0);
        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(c.comment_count) * %f))';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        if (!$stats_join) {
          $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
        }
        $total += $weight;
      }
      if (module_exists('statistics') && variable_get('statistics_count_content_views', 0) &&
          $weight = (int)variable_get('node_rank_views', 5)) {
        // Inverse law that maps the highest view count on the site to 1 and 0 to 0.
        $scale = variable_get('node_cron_views_scale', 0.0);
        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(nc.totalcount) * %f))';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        $join2 .= ' LEFT JOIN {node_counter} nc ON nc.nid = i.sid';
        $total += $weight;
      }

      // When all search factors are disabled (ie they have a weight of zero),
      // the default score is based only on keyword relevance and there is no need to
      // adjust the score of each item.
      if ($total == 0) {
        $select2 = 'i.relevance AS score';
        $total = 1;
      }
      else {
        $select2 = implode(' + ', $ranking) . ' AS score';
      }

      // Do search.
      $find = do_search($keys, 'node', 'INNER JOIN {node} n ON n.nid = i.sid '. $join1, $conditions1 . (empty($where1) ? '' : ' AND '. $where1), $arguments1, $select2, $join2, $arguments2);

      // Load results.
      $non_regional_results = array();
      foreach ($find as $item) {
        // Build the node body.
        $node = node_load($item->sid);
        $node->build_mode = NODE_BUILD_SEARCH_RESULT;
        $node = node_build_content($node, FALSE, FALSE);
        $node->body = drupal_render($node->content);

        // Fetch comments for snippet.
        $node->body .= module_invoke('comment', 'nodeapi', $node, 'update index');
        // Fetch terms for snippet.
        $node->body .= module_invoke('taxonomy', 'nodeapi', $node, 'update index');
        
        switch ($node->type) :
        case 'homepage':
          $title = 'Home';
          $url = url('home', array('absolute' => TRUE));
          break;
        default:
          $title = $node->title;
          $url = url('node/'. $item->sid, array('absolute' => TRUE));
          break;
        endswitch;
        
        $extra = node_invoke_nodeapi($node, 'search result');
        $non_regional_results[] = array(
          'link' => $url,
          'type' => check_plain(node_get_types('name', $node)),
          'title' => $title,
          'user' => theme('username', $node),
          'date' => $node->changed,
          'node' => $node,
          'extra' => $extra,
          'score' => $item->score / $total,
          'snippet' => search_excerpt($keys, $node->body),
        );
      }
      
      /**
       * THIS IS THE REGIONAL CONTENT SEARCH
       */

      //Build matching conditions 
      $where1 = '';
      $join1 = '';
      $arguments1 = array();
      $conditions1 = 'n.status = 1';

      if ($type = search_query_extract($keys, 'type')) {
        $types = array();
        foreach (explode(',', $type) as $t) {
          $types[] = "n.type = '%s'";
          $arguments1[] = $t;
        }
        $conditions1 .= ' AND ('. implode(' OR ', $types) .')';
        $keys = search_query_insert($keys, 'type');
      }
      
      //This is the key to retreiving regional content for the search
      $conditions1 .= " AND tn.tid = %d";
      $arguments1[] = ip2region_get_region_tid();
      $join1 .= ' INNER JOIN {term_node} tn ON n.vid = tn.vid';
  

      // Build ranking expression (we try to map each parameter to a
      // uniform distribution in the range 0..1).
      $ranking = array();
      $arguments2 = array();
      $join2 = '';
      // Used to avoid joining on node_comment_statistics twice
      $stats_join = FALSE;
      $total = 0;
      if ($weight = (int)variable_get('node_rank_relevance', 5)) {
        // Average relevance values hover around 0.15
        $ranking[] = '%d * i.relevance';
        $arguments2[] = $weight;
        $total += $weight;
      }
      if ($weight = (int)variable_get('node_rank_recent', 5)) {
        // Exponential decay with half-life of 6 months, starting at last indexed node
        $ranking[] = '%d * POW(2, (GREATEST(MAX(n.created), MAX(n.changed), MAX(c.last_comment_timestamp)) - %d) * 6.43e-8)';
        $arguments2[] = $weight;
        $arguments2[] = (int)variable_get('node_cron_last', 0);
        $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
        $stats_join = TRUE;
        $total += $weight;
      }
      if (module_exists('comment') && $weight = (int)variable_get('node_rank_comments', 5)) {
        // Inverse law that maps the highest reply count on the site to 1 and 0 to 0.
        $scale = variable_get('node_cron_comments_scale', 0.0);
        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(c.comment_count) * %f))';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        if (!$stats_join) {
          $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
        }
        $total += $weight;
      }
      if (module_exists('statistics') && variable_get('statistics_count_content_views', 0) &&
          $weight = (int)variable_get('node_rank_views', 5)) {
        // Inverse law that maps the highest view count on the site to 1 and 0 to 0.
        $scale = variable_get('node_cron_views_scale', 0.0);
        $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(nc.totalcount) * %f))';
        $arguments2[] = $weight;
        $arguments2[] = $scale;
        $join2 .= ' LEFT JOIN {node_counter} nc ON nc.nid = i.sid';
        $total += $weight;
      }

      // When all search factors are disabled (ie they have a weight of zero),
      // the default score is based only on keyword relevance and there is no need to
      // adjust the score of each item.
      if ($total == 0) {
        $select2 = 'i.relevance AS score';
        $total = 1;
      }
      else {
        $select2 = implode(' + ', $ranking) . ' AS score';
      }

      // Do search.
      $find = do_search($keys, 'node', 'INNER JOIN {node} n ON n.nid = i.sid '. $join1, $conditions1 . (empty($where1) ? '' : ' AND '. $where1), $arguments1, $select2, $join2, $arguments2);

      // Load results.
      $regional_results = array();
      foreach ($find as $item) {
        // Build the node body.
        $node = node_load($item->sid);
        $node->build_mode = NODE_BUILD_SEARCH_RESULT;
        $node = node_build_content($node, FALSE, FALSE);
        $node->body = drupal_render($node->content);

        // Fetch comments for snippet.
        $node->body .= module_invoke('comment', 'nodeapi', $node, 'update index');
        // Fetch terms for snippet.
        $node->body .= module_invoke('taxonomy', 'nodeapi', $node, 'update index');
        
        /** 
        *  This switch massages the results before display
        *  
        *  TODO: If opensourcing, this should not reference specific content types.
        *         Instead it should reference regional content and map to the generic URL.
        *         This may require someway of mapping the two, i.e. a database table + adminstration form.
        **/
        switch ($node->type) :
        case 'regional_go_local':
        	//regional_go_local content is shown on the 'Go Local' page, so point to 'Go Local'
          $title = "Go Local";
          $url = url('go-local', array('absolute' => TRUE));
          break;
        case 'regional_banner_intro':
        	//regional_banner_intro is shown on the 'Home' page, so point to 'Home'
          $title = 'Home';
          $url = url('home', array('absolute' => TRUE));
          break;
        case 'database':
        	//Show actual title and URL from the content
          $title = $node->title;
          $url = url($node->field_url[0]['url']);
          break;
        default:
        	//Regional search shouldn't return any 'standard' results, but just in case
          $title = $node->title;
          $url = url('node/'. $item->sid, array('absolute' => TRUE));
          break;
        endswitch;
        
        $extra = node_invoke_nodeapi($node, 'search result');
        
        $regional_results[] = array(
          'link' => $url,
          'type' => check_plain(node_get_types('name', $node)),
          'title' => $title,
          'user' => theme('username', $node),
          'date' => $node->changed,
          'node' => $node,
          'extra' => $extra,
          'score' => $item->score / $total,
          'snippet' => search_excerpt($keys, $node->body),
        );
	
      }
      return array_merge($regional_results,$non_regional_results); 
  }
  
}
